# Generated by Django 4.2.11 on 2024-04-08 07:31

from django.db import migrations


def add_initial_data(apps, schema_editor):
    Module = apps.get_model("rbac", "Module")
    Permission = apps.get_model("rbac", "Permission")
    Role = apps.get_model("rbac", "Role")

    # Create Module
    user_management_module = Module.objects.create(name="User Management")

    # Permissions list
    super_admin_permissions_names = [
        "can_create_faculty_admin",
        "can_create_student",
        "can_create_teacher",
        "can_update_faculty_admin",
        "can_update_student",
        "can_update_teacher",
        "can_retrieve_faculty_admin",
        "can_retrieve_student",
        "can_retrieve_teacher",
        "can_delete_faculty_admin",
        "can_delete_student",
        "can_delete_teacher",
    ]
    faculty_admin_permissions_names = [
        "can_create_student",
        "can_update_student",
        "can_retrieve_student",
        "can_delete_student",
        "can_create_teacher",
        "can_update_teacher",
        "can_retrieve_teacher",
        "can_delete_teacher",
    ]
    teacher_permissions_names = []
    student_permissions_names = []

    # Create Permissions
    permissions = [
        Permission.objects.create(name=perm_name, module=user_management_module)
        for perm_name in super_admin_permissions_names
    ]

    # Roles list
    roles_names = [
        "Super Admin",
        "Faculty Admin",
        "Teacher",
        "Student",
    ]

    # Create Roles and assign permissions
    for role_name in roles_names:
        role = Role.objects.create(name=role_name)
        if role_name == "Super Admin":
            role.permissions.set(permissions)
            role.save()
        elif role_name == "Faculty Admin":
            role.permissions.set(Permission.objects.filter(name__in=faculty_admin_permissions_names))
            role.save()
        elif role_name == "Teacher":
            role.permissions.set(Permission.objects.filter(name__in=teacher_permissions_names))
            role.save()
        elif role_name == "Student":
            role.permissions.set(Permission.objects.filter(name__in=student_permissions_names))
            role.save()


class Migration(migrations.Migration):

    dependencies = [
        ("rbac", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(add_initial_data),
    ]
